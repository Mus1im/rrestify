import asyncio
import sqlite3
import os
import logging
import re
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CLIENT_TOKEN = "7882205686:AAEhWPfQ7ToP0PkRSkz2-EUmpNE0MKdqi9s"
SUPPLIER_TOKEN = "7056012254:AAF4yNL7CdSw9n-do7QQ0kcLf4nGpdV-RkU"
ADMIN_TOKEN = "7626888261:AAFbPb5b-L4sNvSnk9W6Mg7r7FEmWp-6Lv8"
ADMIN_PASSWORD = "8585"  # –ü–∞—Ä–æ–ª—å –¥–ª—è –∞–¥–º–∏–Ω–∞

# –ù–∞—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (—Å —É–ø—Ä–æ—â–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏)
MARKUP_RATES = {
    "–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã": 1.40,
    "–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞": 1.50,
    "–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã": 1.60,
    "–Ø–π—Ü–∞": 1.20,
    "–ì—Ä–∏–±—ã": 1.40,
    "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": 1.20,
    "–°–º–µ—Ç–∞–Ω–∞ –∏ —Ç–≤–æ—Ä–æ–≥": 1.20,
    "–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ": 1.20,
    "–°—ã—Ä—ã": 1.40,
    "–ú—É–∫–∞ –∏ —Å–∞—Ö–∞—Ä": 1.20,
    "–ö—Ä—É–ø—ã –∏ –º–∞–∫–∞—Ä–æ–Ω—ã": 1.20,
    "–ú–∞—Å–ª–∞ –∏ —É–∫—Å—É—Å": 1.20,
    "–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã": 1.40,
    "–ö–æ–Ω—Å–µ—Ä–≤—ã": 1.40,
    "–û—Ä–µ—Ö–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã": 1.60,
    "–ë–æ–±–æ–≤—ã–µ": 1.20,
    "–ö–æ–ª–±–∞—Å—ã –∏ —Å–æ—Å–∏—Å–∫–∏": 1.40,
    "–ö–æ–ø—á–µ–Ω–æ—Å—Ç–∏": 1.50,
    "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã": 1.40,
    "–ú—è—Å–Ω—ã–µ –Ω–∞—Ä–µ–∑–∫–∏": 1.40,
    "–•–ª–µ–± –∏ –±—É–ª–æ—á–∫–∏": 1.20,
    "–í—ã–ø–µ—á–∫–∞": 1.40,
    "–î–µ—Å–µ—Ä—Ç—ã": 1.60,
    "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ": 1.40,
    "–¢–µ—Å—Ç–æ": 1.20,
    "–ö–æ—Ñ–µ": 1.60,
    "–ß–∞–π": 1.40,
    "–°–∏—Ä–æ–ø—ã": 1.60,
    "–°–æ–∫–∏": 1.40,
    "–í–æ–¥–∞": 1.20,
    "–ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏": 1.40,
    "–ú–æ–ª–æ—á–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏": 1.40,
    "–§—Ä–µ—à–∏": 1.80,
    "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏": 1.80,
    "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏": 1.80,
    "–§–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏": 1.80,
    "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏": 1.80,
    "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞": 1.40,
    "–£–ø–∞–∫–æ–≤–∫–∞": 1.40,
    "–ö—Ä—ã—à–∫–∏ –∏ —Å–æ–ª–æ–º–∏–Ω–∫–∏": 1.60,
    "–°–∞–ª—Ñ–µ—Ç–∫–∏": 1.40,
    "–§–∏–ª—å—Ç—Ä—ã": 1.60,
    "–ú–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞": 1.40,
    "–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –∂–∏—Ä–∞": 1.40,
    "–î–µ–∑–∏–Ω—Ñ–µ–∫—Ç–∞–Ω—Ç—ã": 1.40,
    "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏": 1.40,
    "–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è —Ä—É–∫": 1.40,
    "–ö—É—Ö–æ–Ω–Ω–∞—è –ø–æ—Å—É–¥–∞": 1.40,
    "–°–µ—Ä–≤–∏—Ä–æ–≤–æ—á–Ω–∞—è –ø–æ—Å—É–¥–∞": 1.40,
    "–°—Ç–∞–∫–∞–Ω—ã –∏ –±–æ–∫–∞–ª—ã": 1.40,
    "–°—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã": 1.40,
    "–ë–∞—Ä–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": 1.60,
    "–¢–µ–∫—Å—Ç–∏–ª—å": 1.40
}

# –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
CATEGORIES = {
    "–°–≤–µ–∂–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã": [
        "–û–≤–æ—â–∏ –∏ —Ñ—Ä—É–∫—Ç—ã",
        "–ú—è—Å–æ –∏ –ø—Ç–∏—Ü–∞",
        "–†—ã–±–∞ –∏ –º–æ—Ä–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
        "–Ø–π—Ü–∞",
        "–ì—Ä–∏–±—ã"
    ],
    "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã": [
        "–ú–æ–ª–æ—á–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã",
        "–°–º–µ—Ç–∞–Ω–∞ –∏ —Ç–≤–æ—Ä–æ–≥",
        "–°–ª–∏–≤–æ—á–Ω–æ–µ –º–∞—Å–ª–æ",
        "–°—ã—Ä—ã"
    ],
    "–ë–∞–∫–∞–ª–µ—è": [
        "–ú—É–∫–∞ –∏ —Å–∞—Ö–∞—Ä",
        "–ö—Ä—É–ø—ã –∏ –º–∞–∫–∞—Ä–æ–Ω—ã",
        "–ú–∞—Å–ª–∞ –∏ —É–∫—Å—É—Å",
        "–°–ø–µ—Ü–∏–∏ –∏ –ø—Ä–∏–ø—Ä–∞–≤—ã",
        "–ö–æ–Ω—Å–µ—Ä–≤—ã",
        "–û—Ä–µ—Ö–∏ –∏ —Å—É—Ö–æ—Ñ—Ä—É–∫—Ç—ã",
        "–ë–æ–±–æ–≤—ã–µ"
    ],
    "–ú—è—Å–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è": [
        "–ö–æ–ª–±–∞—Å—ã –∏ —Å–æ—Å–∏—Å–∫–∏",
        "–ö–æ–ø—á–µ–Ω–æ—Å—Ç–∏",
        "–ó–∞–º–æ—Ä–æ–∂–µ–Ω–Ω—ã–µ –ø–æ–ª—É—Ñ–∞–±—Ä–∏–∫–∞—Ç—ã",
        "–ú—è—Å–Ω—ã–µ –Ω–∞—Ä–µ–∑–∫–∏"
    ],
    "–•–ª–µ–± –∏ –≤—ã–ø–µ—á–∫–∞": [
        "–•–ª–µ–± –∏ –±—É–ª–æ—á–∫–∏",
        "–í—ã–ø–µ—á–∫–∞",
        "–î–µ—Å–µ—Ä—Ç—ã",
        "–ú–æ—Ä–æ–∂–µ–Ω–æ–µ",
        "–¢–µ—Å—Ç–æ"
    ],
    "–ù–∞–ø–∏—Ç–∫–∏": [
        "–ö–æ—Ñ–µ",
        "–ß–∞–π",
        "–°–∏—Ä–æ–ø—ã",
        "–°–æ–∫–∏",
        "–í–æ–¥–∞",
        "–ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏",
        "–ú–æ–ª–æ—á–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"
    ],
    "–ü—Ä–µ–º–∏—É–º –Ω–∞–ø–∏—Ç–∫–∏": [
        "–§—Ä–µ—à–∏",
        "–ê–≤—Ç–æ—Ä—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏",
        "–ë–µ–∑–∞–ª–∫–æ–≥–æ–ª—å–Ω—ã–µ –∫–æ–∫—Ç–µ–π–ª–∏",
        "–§–µ—Ä–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏",
        "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏"
    ],
    "–†–∞—Å—Ö–æ–¥–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã": [
        "–û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ—Å—É–¥–∞",
        "–£–ø–∞–∫–æ–≤–∫–∞",
        "–ö—Ä—ã—à–∫–∏ –∏ —Å–æ–ª–æ–º–∏–Ω–∫–∏",
        "–°–∞–ª—Ñ–µ—Ç–∫–∏",
        "–§–∏–ª—å—Ç—Ä—ã"
    ],
    "–ß–∏—Å—Ç—è—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞": [
        "–ú–æ—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞",
        "–°—Ä–µ–¥—Å—Ç–≤–∞ –æ—Ç –∂–∏—Ä–∞",
        "–î–µ–∑–∏–Ω—Ñ–µ–∫—Ç–∞–Ω—Ç—ã",
        "–°—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —É–±–æ—Ä–∫–∏",
        "–î–µ–∑–∏–Ω—Ñ–µ–∫—Ü–∏—è —Ä—É–∫"
    ],
    "–ü–æ—Å—É–¥–∞ –∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å": [
        "–ö—É—Ö–æ–Ω–Ω–∞—è –ø–æ—Å—É–¥–∞",
        "–°–µ—Ä–≤–∏—Ä–æ–≤–æ—á–Ω–∞—è –ø–æ—Å—É–¥–∞",
        "–°—Ç–∞–∫–∞–Ω—ã –∏ –±–æ–∫–∞–ª—ã",
        "–°—Ç–æ–ª–æ–≤—ã–µ –ø—Ä–∏–±–æ—Ä—ã",
        "–ë–∞—Ä–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å",
        "–¢–µ–∫—Å—Ç–∏–ª—å"
    ]
}

# –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤
ORDER_STATUSES = {
    "new": "üÜï –ù–æ–≤—ã–π",
    "confirmed": "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω",
    "on_way": "üöö –í –ø—É—Ç–∏",
    "delivered": "üì¶ –î–æ—Å—Ç–∞–≤–ª–µ–Ω",
    "canceled": "‚ùå –û—Ç–º–µ–Ω—ë–Ω"
}

# –¢–∏–ø—ã —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
RECURRING_TYPES = {
    "daily": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ",
    "weekly": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ",
    "monthly": "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
}

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
PHONE_REGEX = re.compile(r'^(\+7|7|8)?[\s\-]?\(?[489][0-9]{2}\)?[\s\-]?[0-9]{3}[\s\-]?[0-9]{2}[\s\-]?[0-9]{2}$')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    if os.path.exists('b2b.db'):
        os.remove('b2b.db')
    
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cur.execute('''CREATE TABLE users (
                id INTEGER PRIMARY KEY,
                tg_id INTEGER UNIQUE,
                name TEXT,
                role TEXT,
                company TEXT,
                phone TEXT,
                address TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''') 
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (—Ç–µ–ø–µ—Ä—å —Å –∏–µ—Ä–∞—Ä—Ö–∏–µ–π)
    cur.execute('''CREATE TABLE categories (
                id INTEGER PRIMARY KEY,
                name TEXT,
                parent_id INTEGER DEFAULT NULL,
                FOREIGN KEY (parent_id) REFERENCES categories(id))''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤ (–¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—è –¥–ª—è —Ü–µ–Ω)
    cur.execute('''CREATE TABLE products (
                id INTEGER PRIMARY KEY,
                name TEXT,
                description TEXT,
                supplier_price REAL,  -- –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
                final_price REAL,     -- –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π
                category_id INTEGER,
                supplier_id INTEGER,
                approved BOOLEAN DEFAULT 0,
                status TEXT DEFAULT 'active',
                in_stock BOOLEAN DEFAULT 1,  -- –ù–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
                quantity INTEGER DEFAULT 0,   -- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ —Å–∫–ª–∞–¥–µ
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (category_id) REFERENCES categories(id),
                FOREIGN KEY (supplier_id) REFERENCES users(id))''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–∑–∏–Ω
    cur.execute('''CREATE TABLE cart (
                id INTEGER PRIMARY KEY,
                user_id INTEGER,
                product_id INTEGER,
                quantity INTEGER,
                is_recurring BOOLEAN DEFAULT 0,
                recurring_type TEXT,
                next_delivery DATE,
                FOREIGN KEY (user_id) REFERENCES users(id),
                FOREIGN KEY (product_id) REFERENCES products(id))''')
    
    # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
    cur.execute('''CREATE TABLE orders (
                id INTEGER PRIMARY KEY,
                customer_id INTEGER,
                status TEXT DEFAULT 'new',
                total_amount REAL,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                is_recurring BOOLEAN DEFAULT 0,
                recurring_type TEXT,
                next_delivery DATE,
                parent_order_id INTEGER DEFAULT NULL,
                FOREIGN KEY (customer_id) REFERENCES users(id),
                FOREIGN KEY (parent_order_id) REFERENCES orders(id))''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∑–∞–∫–∞–∑–∞
    cur.execute('''CREATE TABLE order_items (
                id INTEGER PRIMARY KEY,
                order_id INTEGER,
                product_id INTEGER,
                quantity INTEGER,
                price REAL,
                FOREIGN KEY (order_id) REFERENCES orders(id),
                FOREIGN KEY (product_id) REFERENCES products(id))''')
    
    # –¢–∞–±–ª–∏—Ü–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–æ–≤
    cur.execute('''CREATE TABLE order_supplier_status (
                id INTEGER PRIMARY KEY,
                order_id INTEGER,
                supplier_id INTEGER,
                status TEXT DEFAULT 'pending',
                problem_description TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (order_id) REFERENCES orders(id),
                FOREIGN KEY (supplier_id) REFERENCES users(id))''')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    main_category_ids = {}
    for main_category, subcategories in CATEGORIES.items():
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        cur.execute("INSERT INTO categories (name) VALUES (?)", (main_category,))
        main_category_id = cur.lastrowid
        main_category_ids[main_category] = main_category_id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for subcategory in subcategories:
            cur.execute("INSERT INTO categories (name, parent_id) VALUES (?, ?)", 
                       (subcategory, main_category_id))
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    cur.execute("INSERT OR IGNORE INTO users (tg_id, name, role, company) VALUES (?, ?, ?, ?)",
                (123456789, "Admin User", "admin", "System"))
    
    conn.commit()
    conn.close()
    logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
init_db()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class ProductForm(StatesGroup):
    name = State()
    description = State()
    price = State()
    category = State()
    quantity = State()

class OrderForm(StatesGroup):
    address = State()
    comment = State()
    recurring = State()
    recurring_type = State()
    delivery_date = State()

class AdminAuth(StatesGroup):
    password = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
class ClientRegistration(StatesGroup):
    name = State()
    phone = State()
    address = State()

class SupplierRegistration(StatesGroup):
    name = State()
    phone = State()
    address = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
class EditProfile(StatesGroup):
    name = State()
    phone = State()
    address = State()

class SupplierProblem(StatesGroup):
    description = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
class EditProduct(StatesGroup):
    name = State()
    description = State()
    price = State()
    category = State()
    quantity = State()
    in_stock = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchForm(StatesGroup):
    query = State()

# ====================== –û–ë–©–ò–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ë–î ======================
def add_user(tg_id, name, role, company, phone=None, address=None):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (tg_id, name, role, company, phone, address) VALUES (?, ?, ?, ?, ?, ?)", 
                (tg_id, name, role, company, phone, address))
    conn.commit()
    conn.close()
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name} ({role})")

def update_user(tg_id, name, phone, address):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("UPDATE users SET name=?, phone=?, address=? WHERE tg_id=?", 
                (name, phone, address, tg_id))
    conn.commit()
    conn.close()
    logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {name}")

def get_user(tg_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE tg_id = ?", (tg_id,))
    user = cur.fetchone()
    conn.close()
    return user

def get_categories(parent_id=None):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ø–æ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    if parent_id is None:
        cur.execute("SELECT id, name FROM categories WHERE parent_id IS NULL")
    else:
        cur.execute("SELECT id, name FROM categories WHERE parent_id = ?", (parent_id,))
    
    categories = cur.fetchall()
    conn.close()
    return categories

def get_category(category_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ ID"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT id, name, parent_id FROM categories WHERE id = ?", (category_id,))
    category = cur.fetchone()
    conn.close()
    return category

def calculate_final_price(supplier_price, category_name):
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É —Å –Ω–∞—Ü–µ–Ω–∫–æ–π –∏ –æ–∫—Ä—É–≥–ª–µ–Ω–∏–µ–º"""
    markup_rate = MARKUP_RATES.get(category_name, 1.40)  # 40% –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    final_price = supplier_price * markup_rate
    return round(final_price)  # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª–æ–≥–æ —Ä—É–±–ª—è

def add_product(name, description, supplier_price, category_id, supplier_id, quantity=0, approved=False):
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä —Å —Ä–∞—Å—á–µ—Ç–æ–º –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–∞—Ü–µ–Ω–∫–∏
    cur.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
    category_result = cur.fetchone()
    category_name = category_result[0] if category_result else ""
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
    final_price = calculate_final_price(supplier_price, category_name)
    
    in_stock = quantity > 0
    
    cur.execute("""
        INSERT INTO products (name, description, supplier_price, final_price, category_id, supplier_id, approved, quantity, in_stock) 
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
    """, (name, description, supplier_price, final_price, category_id, supplier_id, approved, quantity, in_stock))
    product_id = cur.lastrowid
    conn.commit()
    conn.close()
    logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä: {name} (ID: {product_id}, –¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {supplier_price}, –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {final_price}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity})")
    return product_id

def update_product(product_id, name=None, description=None, supplier_price=None, category_id=None, quantity=None, in_stock=None):
    """–û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    updates = []
    params = []
    
    if name:
        updates.append("name = ?")
        params.append(name)
    if description:
        updates.append("description = ?")
        params.append(description)
    if supplier_price is not None:
        updates.append("supplier_price = ?")
        params.append(supplier_price)
    if category_id:
        updates.append("category_id = ?")
        params.append(category_id)
    if quantity is not None:
        in_stock_val = quantity > 0
        updates.append("quantity = ?")
        updates.append("in_stock = ?")
        params.append(quantity)
        params.append(in_stock_val)
    elif in_stock is not None:
        updates.append("in_stock = ?")
        params.append(in_stock)
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if updates:
        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Ü–µ–Ω—É
        if supplier_price or category_id:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞
            cur.execute("SELECT category_id FROM products WHERE id = ?", (product_id,))
            current_category_id = cur.fetchone()[0]
            
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ
            if category_id:
                current_category_id = category_id
                
            cur.execute("SELECT name FROM categories WHERE id = ?", (current_category_id,))
            category_name = cur.fetchone()[0]
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞, –∏–Ω–∞—á–µ –±–µ—Ä–µ–º —Ç–µ–∫—É—â—É—é
            if supplier_price is None:
                cur.execute("SELECT supplier_price FROM products WHERE id = ?", (product_id,))
                supplier_price = cur.fetchone()[0]
            
            final_price = calculate_final_price(supplier_price, category_name)
            updates.append("final_price = ?")
            params.append(final_price)
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        updates.append("approved = 0")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
        update_str = ", ".join(updates)
        params.append(product_id)
        
        cur.execute(f"UPDATE products SET {update_str} WHERE id = ?", params)
        conn.commit()
    
    conn.close()
    return True

def approve_product(product_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("UPDATE products SET approved = 1 WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()
    logger.info(f"–¢–æ–≤–∞—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω: ID {product_id}")

def reject_product(product_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM products WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()
    logger.info(f"–¢–æ–≤–∞—Ä –æ—Ç–∫–ª–æ–Ω–µ–Ω: ID {product_id}")

def toggle_product_stock(product_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("UPDATE products SET in_stock = NOT in_stock WHERE id = ?", (product_id,))
    conn.commit()
    cur.execute("SELECT in_stock FROM products WHERE id = ?", (product_id,))
    in_stock = cur.fetchone()[0]
    conn.close()
    return in_stock

def get_pending_products():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–æ–≤–∞—Ä—ã, –æ–∂–∏–¥–∞—é—â–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM products WHERE approved = 0")
    products = cur.fetchall()
    conn.close()
    return products

def add_to_cart(user_id, product_id, quantity=1, is_recurring=False, recurring_type=None, next_delivery=None):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
    cur.execute("SELECT quantity, in_stock FROM products WHERE id = ?", (product_id,))
    product = cur.fetchone()
    if not product or not product[1]:  # in_stock
        conn.close()
        return False, "–¢–æ–≤–∞—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    available_quantity = product[0]
    if available_quantity < quantity:
        conn.close()
        return False, f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_quantity} —à—Ç."
    
    cur.execute("""
        SELECT id, quantity 
        FROM cart 
        WHERE user_id = ? 
          AND product_id = ? 
          AND is_recurring = ?
          AND recurring_type = ?
          AND next_delivery = ?
    """, (user_id, product_id, is_recurring, recurring_type, next_delivery))
    item = cur.fetchone()
    
    if item:
        new_quantity = item[1] + quantity
        if new_quantity > available_quantity:
            conn.close()
            return False, f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_quantity} —à—Ç. –£ –≤–∞—Å —É–∂–µ {item[1]} –≤ –∫–æ—Ä–∑–∏–Ω–µ"
        
        cur.execute("UPDATE cart SET quantity = ? WHERE id = ?", (new_quantity, item[0]))
    else:
        cur.execute("""
            INSERT INTO cart (user_id, product_id, quantity, is_recurring, recurring_type, next_delivery) 
            VALUES (?, ?, ?, ?, ?, ?)
        """, (user_id, product_id, quantity, is_recurring, recurring_type, next_delivery))
    
    conn.commit()
    conn.close()
    return True, ""

def get_cart(user_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT c.id, p.id, p.name, p.final_price, c.quantity, 
               c.is_recurring, c.recurring_type, c.next_delivery
        FROM cart c 
        JOIN products p ON c.product_id = p.id 
        WHERE c.user_id = ? AND p.approved = 1 AND p.in_stock = 1
    """, (user_id,))
    cart_items = cur.fetchall()
    conn.close()
    return cart_items

def clear_cart(user_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    conn.commit()
    conn.close()

def create_order(user_id, address="", comment="", is_recurring=False, recurring_type=None, next_delivery=None, parent_order_id=None):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    cart_items = get_cart(user_id)
    if not cart_items:
        return None, "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏ —Å–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
    for item in cart_items:
        cart_id, product_id, name, price, quantity, _, _, _ = item
        cur.execute("SELECT quantity FROM products WHERE id = ?", (product_id,))
        available_quantity = cur.fetchone()[0]
        
        if available_quantity < quantity:
            conn.close()
            return None, f"–¢–æ–≤–∞—Ä '{name}' –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {quantity} —à—Ç. (–¥–æ—Å—Ç—É–ø–Ω–æ {available_quantity} —à—Ç.)"
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        new_quantity = available_quantity - quantity
        in_stock = new_quantity > 0
        cur.execute("UPDATE products SET quantity = ?, in_stock = ? WHERE id = ?", 
                   (new_quantity, in_stock, product_id))
    
    total_amount = sum(item[3] * item[4] for item in cart_items)  # final_price * quantity
    
    cur.execute("""
        INSERT INTO orders (customer_id, total_amount, is_recurring, recurring_type, next_delivery, parent_order_id) 
        VALUES (?, ?, ?, ?, ?, ?)
    """, (user_id, total_amount, is_recurring, recurring_type, next_delivery, parent_order_id))
    order_id = cur.lastrowid
    
    for item in cart_items:
        _, product_id, _, price, quantity, _, _, _ = item
        cur.execute("""
            INSERT INTO order_items (order_id, product_id, quantity, price) 
            VALUES (?, ?, ?, ?)
        """, (order_id, product_id, quantity, price))
    
    cur.execute("DELETE FROM cart WHERE user_id = ?", (user_id,))
    
    conn.commit()
    conn.close()
    return order_id, ""

def get_user_orders(user_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT id, total_amount, status, created_at, is_recurring, recurring_type, next_delivery 
        FROM orders 
        WHERE customer_id = ?
    """, (user_id,))
    orders = cur.fetchall()
    conn.close()
    return orders

def get_order_details(order_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    cur.execute("SELECT * FROM orders WHERE id = ?", (order_id,))
    order = cur.fetchone()
    
    cur.execute("""
        SELECT p.name, oi.quantity, oi.price 
        FROM order_items oi 
        JOIN products p ON oi.product_id = p.id 
        WHERE order_id = ?
    """, (order_id,))
    items = cur.fetchall()
    
    conn.close()
    return order, items

def get_supplier_products(supplier_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    # –î–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ supplier_price
    cur.execute("""
        SELECT id, name, supplier_price, approved, in_stock, quantity 
        FROM products 
        WHERE supplier_id = ?
    """, (supplier_id,))
    products = cur.fetchall()
    conn.close()
    return products

def get_visible_products(category_id=None, offset=0, limit=10):
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤–∏–¥–∏–º—ã–µ —Ç–æ–≤–∞—Ä—ã (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã–µ) —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    if category_id:
        cur.execute("""
            SELECT id, name, final_price, in_stock, quantity 
            FROM products 
            WHERE approved = 1 
              AND status = 'active'
              AND in_stock = 1
              AND category_id = ?
            LIMIT ? OFFSET ?
        """, (category_id, limit, offset))
    else:
        cur.execute("""
            SELECT id, name, final_price, in_stock, quantity 
            FROM products 
            WHERE approved = 1 
              AND status = 'active'
              AND in_stock = 1
            LIMIT ? OFFSET ?
        """, (limit, offset))
    
    products = cur.fetchall()
    conn.close()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(products)} –≤–∏–¥–∏–º—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category_id}")
    return products

def get_category_products_count(category_id):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT COUNT(*) 
        FROM products 
        WHERE approved = 1 
          AND status = 'active'
          AND in_stock = 1
          AND category_id = ?
    """, (category_id,))
    count = cur.fetchone()[0]
    conn.close()
    return count

def get_all_users():
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT tg_id, name, role, company, phone, address FROM users")
    users = cur.fetchall()
    conn.close()
    return users

def get_all_orders():
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT id, customer_id, total_amount, status FROM orders")
    orders = cur.fetchall()
    conn.close()
    return orders

def get_product_details(product_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT 
            id, 
            name, 
            description, 
            supplier_price, 
            final_price, 
            category_id, 
            supplier_id, 
            approved, 
            status, 
            in_stock,
            quantity,
            created_at 
        FROM products 
        WHERE id = ?
    """, (product_id,))
    product = cur.fetchone()
    conn.close()
    return product

def get_user_by_id(tg_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT * FROM users WHERE tg_id = ?", (tg_id,))
    user = cur.fetchone()
    conn.close()
    return user

def get_admins():
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT tg_id FROM users WHERE role = 'admin'")
    admins = [row[0] for row in cur.fetchall()]
    conn.close()
    return admins

def update_order_status(order_id, status):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("UPDATE orders SET status = ? WHERE id = ?", (status, order_id))
    conn.commit()
    conn.close()
    logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}")

def create_order_supplier_status(order_id, supplier_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("INSERT INTO order_supplier_status (order_id, supplier_id) VALUES (?, ?)", 
                (order_id, supplier_id))
    conn.commit()
    conn.close()
    logger.info(f"–°–æ–∑–¥–∞–Ω —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id}")

def update_supplier_status(order_id, supplier_id, status, problem=None):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        UPDATE order_supplier_status 
        SET status = ?, problem_description = ?
        WHERE order_id = ? AND supplier_id = ?
    """, (status, problem, order_id, supplier_id))
    conn.commit()
    conn.close()
    logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ {supplier_id} –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {status}")

def update_cart_quantity(cart_id, delta):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT quantity, product_id FROM cart WHERE id = ?", (cart_id,))
    result = cur.fetchone()
    
    if result:
        quantity, product_id = result
        new_quantity = quantity + delta
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        cur.execute("SELECT quantity FROM products WHERE id = ?", (product_id,))
        available_quantity = cur.fetchone()[0]
        
        if new_quantity <= 0:
            cur.execute("DELETE FROM cart WHERE id = ?", (cart_id,))
        elif new_quantity > available_quantity:
            conn.close()
            return False, f"–î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ {available_quantity} —à—Ç."
        else:
            cur.execute("UPDATE cart SET quantity = ? WHERE id = ?", (new_quantity, cart_id))
        
        conn.commit()
        conn.close()
        return True, ""
    conn.close()
    return False, "–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"

def remove_from_cart(cart_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM cart WHERE id = ?", (cart_id,))
    conn.commit()
    conn.close()
    logger.info(f"–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: ID {cart_id}")

def get_order_suppliers(order_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT DISTINCT p.supplier_id 
        FROM order_items oi 
        JOIN products p ON oi.product_id = p.id 
        WHERE oi.order_id = ?
    """, (order_id,))
    supplier_ids = [row[0] for row in cur.fetchall()]
    conn.close()
    return supplier_ids

def get_supplier_orders(supplier_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT DISTINCT oi.order_id 
        FROM order_items oi 
        JOIN products p ON oi.product_id = p.id 
        WHERE p.supplier_id = ?
    """, (supplier_id,))
    order_ids = [row[0] for row in cur.fetchall()]
    conn.close()
    return order_ids

def get_supplier_order_status(order_id, supplier_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT status, problem_description 
        FROM order_supplier_status 
        WHERE order_id = ? AND supplier_id = ?
    """, (order_id, supplier_id))
    status = cur.fetchone()
    conn.close()
    return status

def get_supplier_order_items(order_id, supplier_id):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    # –î–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º supplier_price –≤–º–µ—Å—Ç–æ –∏—Ç–æ–≥–æ–≤–æ–π —Ü–µ–Ω—ã
    cur.execute("""
        SELECT p.name, oi.quantity, p.supplier_price 
        FROM order_items oi 
        JOIN products p ON oi.product_id = p.id 
        WHERE oi.order_id = ? AND p.supplier_id = ?
    """, (order_id, supplier_id))
    items = cur.fetchall()
    conn.close()
    return items

def get_recurring_orders():
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT id, customer_id, recurring_type, next_delivery 
        FROM orders 
        WHERE is_recurring = 1 
          AND status != 'canceled'
    """)
    orders = cur.fetchall()
    conn.close()
    return orders

def create_recurring_order(parent_order_id):
    """–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
    cur.execute("SELECT * FROM orders WHERE id = ?", (parent_order_id,))
    parent_order = cur.fetchone()
    
    if not parent_order:
        return None
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏
    recurring_type = parent_order[6]  # recurring_type
    next_delivery = parent_order[7]   # next_delivery
    
    if recurring_type == "daily":
        new_delivery = (datetime.strptime(next_delivery, "%Y-%m-%d") + timedelta(days=1)).strftime("%Y-%m-%d")
    elif recurring_type == "weekly":
        new_delivery = (datetime.strptime(next_delivery, "%Y-%m-%d") + timedelta(weeks=1)).strftime("%Y-%m-%d")
    elif recurring_type == "monthly":
        # –ü—Ä–æ—Å—Ç–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ 30 –¥–Ω–µ–π - –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        new_delivery = (datetime.strptime(next_delivery, "%Y-%m-%d") + timedelta(days=30)).strftime("%Y-%m-%d")
    else:
        new_delivery = next_delivery
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑
    cur.execute("""
        INSERT INTO orders (customer_id, total_amount, is_recurring, recurring_type, next_delivery, parent_order_id, status) 
        VALUES (?, ?, 1, ?, ?, ?, 'new')
    """, (parent_order[1], parent_order[3], recurring_type, new_delivery, parent_order_id))
    new_order_id = cur.lastrowid
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏ —É —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
    cur.execute("UPDATE orders SET next_delivery = ? WHERE id = ?", (new_delivery, parent_order_id))
    
    # –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∑–∞–∫–∞–∑–∞
    cur.execute("""
        INSERT INTO order_items (order_id, product_id, quantity, price)
        SELECT ?, product_id, quantity, price
        FROM order_items
        WHERE order_id = ?
    """, (new_order_id, parent_order_id))
    
    conn.commit()
    conn.close()
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    notify_user(parent_order[1], f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–∫–∞–∑ #{new_order_id} –Ω–∞ {new_delivery}")
    
    return new_order_id

def search_products(query):
    """–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –æ–ø–∏—Å–∞–Ω–∏—é"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT id, name, final_price, in_stock, quantity 
        FROM products 
        WHERE approved = 1 
          AND status = 'active'
          AND in_stock = 1
          AND (name LIKE ? OR description LIKE ?)
    """, (f'%{query}%', f'%{query}%'))
    products = cur.fetchall()
    conn.close()
    return products

def check_low_stock():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT id, name, quantity, supplier_id 
        FROM products 
        WHERE quantity <= 10 AND quantity > 0
    """)
    low_stock_products = cur.fetchall()
    conn.close()
    return low_stock_products

def check_out_of_stock():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–≤–∞—Ä—ã, –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ"""
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("""
        SELECT id, name, supplier_id 
        FROM products 
        WHERE quantity = 0 AND in_stock = 1
    """)
    out_of_stock_products = cur.fetchall()
    conn.close()
    return out_of_stock_products

# ====================== –ö–õ–ê–í–ò–ê–¢–£–†–´ ======================
def client_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üì¶ –ö–æ—Ä–∑–∏–Ω–∞")],
            [KeyboardButton(text="üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="üîÑ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

def supplier_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")],
            [KeyboardButton(text="üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True
    )

def admin_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"), KeyboardButton(text="üì¶ –ó–∞–∫–∞–∑—ã")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")],
            [KeyboardButton(text="üÜï –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")]
        ],
        resize_keyboard=True
    )

def recurring_type_keyboard():
    builder = InlineKeyboardBuilder()
    for key, value in RECURRING_TYPES.items():
        builder.add(types.InlineKeyboardButton(
            text=value,
            callback_data=f"recurring_{key}")
        )
    builder.adjust(2)
    return builder.as_markup()

def order_status_keyboard(order_id):
    builder = InlineKeyboardBuilder()
    for status_key, status_text in ORDER_STATUSES.items():
        builder.add(types.InlineKeyboardButton(
            text=status_text,
            callback_data=f"set_status_{order_id}_{status_key}")
        )
    builder.adjust(2)
    return builder.as_markup()

def help_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="üìö FAQ", callback_data="faq"))
    builder.add(types.InlineKeyboardButton(text="üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question"))
    builder.adjust(1)
    return builder.as_markup()

def pagination_keyboard(category_id, current_page, total_pages):
    builder = InlineKeyboardBuilder()
    
    if current_page > 0:
        builder.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"page_{category_id}_{current_page - 1}")
        )
    
    builder.add(types.InlineKeyboardButton(
        text=f"{current_page + 1}/{total_pages}",
        callback_data="no_action")
    )
    
    if current_page < total_pages - 1:
        builder.add(types.InlineKeyboardButton(
            text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è",
            callback_data=f"page_{category_id}_{current_page + 1}")
        )
    
    builder.adjust(3)
    return builder.as_markup()

# ====================== –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø ======================
async def notify_admins_about_order(order_id):
    try:
        bot = Bot(token=ADMIN_TOKEN)
        
        order, items = get_order_details(order_id)
        if not order:
            return
        
        order_id, customer_id, total, status, created_at, is_recurring, recurring_type, next_delivery, parent_order_id = order
        customer = get_user_by_id(customer_id)
        
        if not customer:
            return
        
        _, _, name, role, company, phone, address, _ = customer
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ –∏–∑ –∑–∞–∫–∞–∑–∞
        supplier_ids = get_order_suppliers(order_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞—Ö
        suppliers_info = []
        for supplier_id in supplier_ids:
            supplier = get_user_by_id(supplier_id)
            if supplier:
                _, _, s_name, s_role, s_company, s_phone, s_address, _ = supplier
                suppliers_info.append(f"  ‚ñ™Ô∏è {s_name} ({s_company}), —Ç–µ–ª.: {s_phone}, –∞–¥—Ä–µ—Å: {s_address}")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        text = (
            "üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n\n"
            f"üÜî <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {name} ({company})\n"
            f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
            f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {total} —Ä—É–±.\n"
            f"üìÆ <b>–°—Ç–∞—Ç—É—Å:</b> {ORDER_STATUSES.get(status, status)}\n"
        )
        
        if is_recurring:
            text += f"üîÑ <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–π:</b> {RECURRING_TYPES.get(recurring_type, recurring_type)}\n"
            text += f"üìÖ <b>–°–ª–µ–¥—É—é—â–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:</b> {next_delivery}\n"
        
        text += "\nüì¶ <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        
        for item in items:
            name, quantity, price = item
            text += f"  ‚ñ™Ô∏è {name} - {quantity} —à—Ç. x {price} —Ä—É–±.\n"
        
        if suppliers_info:
            text += "\nüè≠ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫–∏:</b>\n" + "\n".join(suppliers_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admins = get_admins()
        for admin_id in admins:
            try:
                await bot.send_message(
                    admin_id,
                    text,
                    parse_mode="HTML"
                )
            except:
                pass
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–∫–∞–∑–µ: {e}")
    finally:
        await bot.session.close()

async def notify_suppliers_about_order(order_id):
    try:
        bot = Bot(token=SUPPLIER_TOKEN)
        _, items = get_order_details(order_id)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä—ã –ø–æ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞–º —Å supplier_price
        supplier_items = {}
        for item in items:
            product_name, quantity, _ = item
            conn = sqlite3.connect('b2b.db')
            cur = conn.cursor()
            cur.execute("""
                SELECT p.supplier_id, p.supplier_price 
                FROM products p 
                WHERE p.name = ?
            """, (product_name,))
            result = cur.fetchone()
            if result:
                supplier_id, supplier_price = result
                if supplier_id not in supplier_items:
                    supplier_items[supplier_id] = []
                supplier_items[supplier_id].append((product_name, quantity, supplier_price))
            conn.close()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        for supplier_id, items in supplier_items.items():
            text = "üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó!</b>\n\n"
            text += f"üÜî –ó–∞–∫–∞–∑ #{order_id}\n"
            text += "üì¶ –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n"
            for item in items:
                name, quantity, price = item
                text += f"  ‚ñ™Ô∏è {name} - {quantity} —à—Ç. x {price} —Ä—É–±.\n"
            
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
                callback_data=f"supplier_ready_{order_id}")
            )
            builder.add(types.InlineKeyboardButton(
                text="‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–≤–∞—Ä–æ–º",
                callback_data=f"supplier_problem_{order_id}")
            )
            
            await bot.send_message(
                supplier_id,
                text,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
            create_order_supplier_status(order_id, supplier_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤: {str(e)}")
    finally:
        await bot.session.close()

async def notify_customer_about_status(order_id, status):
    try:
        bot = Bot(token=CLIENT_TOKEN)
        
        order, items = get_order_details(order_id)
        if not order:
            return
        
        customer_id = order[1]
        status_text = ORDER_STATUSES.get(status, status)
        
        text = f"üîÑ –°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω: <b>{status_text}</b>"
        
        await bot.send_message(
            customer_id,
            text,
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞: {str(e)}")
    finally:
        await bot.session.close()

async def notify_admin_about_supplier_status(order_id, supplier_id, status, problem=None):
    try:
        bot = Bot(token=ADMIN_TOKEN)
        
        supplier = get_user_by_id(supplier_id)
        if not supplier:
            return
        
        _, _, name, role, company, phone, address, _ = supplier
        
        status_text = {
            'ready': "–≥–æ—Ç–æ–≤",
            'problem': "–ø—Ä–æ–±–ª–µ–º–∞"
        }.get(status, status)
        
        text = (
            f"üè≠ <b>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞</b>\n\n"
            f"üÜî –ó–∞–∫–∞–∑ #{order_id}\n"
            f"üè≠ –ü–æ—Å—Ç–∞–≤—â–∏–∫: {name} ({company})\n"
            f"üìÆ –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
        )
        
        if problem:
            text += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {problem}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admins = get_admins()
        for admin_id in admins:
            try:
                await bot.send_message(
                    admin_id,
                    text,
                    parse_mode="HTML"
                )
            except:
                pass
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {str(e)}")
    finally:
        await bot.session.close()

async def notify_admins_about_product(product_id):
    try:
        bot = Bot(token=ADMIN_TOKEN)
        
        product = get_product_details(product_id)
        if not product:
            return
        
        (_, name, description, supplier_price, final_price, 
         category_id, supplier_id, approved, status, in_stock, quantity, created_at) = product
        
        supplier = get_user_by_id(supplier_id)
        
        if not supplier:
            return
        
        _, _, s_name, s_role, s_company, s_phone, s_address, _ = supplier
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        conn = sqlite3.connect('b2b.db')
        cur = conn.cursor()
        cur.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
        category_name = cur.fetchone()
        conn.close()
        category_name = category_name[0] if category_name else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
        
        text = (
            "üÜï <b>–ù–û–í–´–ô –¢–û–í–ê–† –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n"
            f"üÜî <b>–¢–æ–≤–∞—Ä #{product_id}</b>\n"
            f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
            f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
            f"üí∞ <b>–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:</b> {supplier_price} —Ä—É–±.\n"
            f"üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {final_price} —Ä—É–±.\n"
            f"üìö <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
            f"üè≠ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {s_name} ({s_company})\n"
            f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
            f"üü¢ <b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {'–î–∞' if in_stock else '–ù–µ—Ç'}\n"
        )
        
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
            callback_data=f"admin_approve_{product_id}")
        )
        builder.add(types.InlineKeyboardButton(
            text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
            callback_data=f"admin_reject_{product_id}")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        admins = get_admins()
        for admin_id in admins:
            try:
                await bot.send_message(
                    admin_id,
                    text,
                    parse_mode="HTML",
                    reply_markup=builder.as_markup()
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ç–æ–≤–∞—Ä–µ: {e}")
    finally:
        await bot.session.close()

async def notify_user(user_id, message):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        user = get_user(user_id)
        if not user:
            return
        
        if user[3] == "customer":
            bot = Bot(token=CLIENT_TOKEN)
        elif user[3] == "supplier":
            bot = Bot(token=SUPPLIER_TOKEN)
        else:
            bot = Bot(token=ADMIN_TOKEN)
        
        await bot.send_message(user_id, message, parse_mode="HTML")
        await bot.session.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

async def notify_supplier_low_stock(supplier_id, product_id, product_name, quantity):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ –Ω–∏–∑–∫–æ–º –æ—Å—Ç–∞—Ç–∫–µ"""
    try:
        bot = Bot(token=SUPPLIER_TOKEN)
        text = (
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ: –Ω–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ —Ç–æ–≤–∞—Ä–∞!</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name} (ID: {product_id})\n"
            f"üìâ –û—Å—Ç–∞—Ç–æ–∫: {quantity} —à—Ç.\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–ª–∞–¥."
        )
        await bot.send_message(supplier_id, text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")

async def notify_supplier_out_of_stock(supplier_id, product_id, product_name):
    """–£–≤–µ–¥–æ–º–∏—Ç—å –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–æ–≤–∞—Ä–∞"""
    try:
        bot = Bot(token=SUPPLIER_TOKEN)
        text = (
            f"‚õî <b>–¢–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ!</b>\n\n"
            f"üì¶ –¢–æ–≤–∞—Ä: {product_name} (ID: {product_id})\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–ª–∞–¥ –∏–ª–∏ —Å–Ω–∏–º–∏—Ç–µ —Ç–æ–≤–∞—Ä —Å –ø—Ä–æ–¥–∞–∂–∏."
        )
        await bot.send_message(supplier_id, text, parse_mode="HTML")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")

# ====================== –ö–õ–ò–ï–ù–¢–°–ö–ò–ô –ë–û–¢ ======================
client_router = Router()

@client_router.message(Command("start"))
async def client_start(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user and user[5] and user[6]:  # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∞–¥—Ä–µ—Å
        await show_client_menu(message)
    else:
        add_user(message.from_user.id, message.from_user.full_name, "customer", "Unknown")
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", 
                            reply_markup=ReplyKeyboardRemove())
        await state.set_state(ClientRegistration.name)

async def show_client_menu(message: types.Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ B2B –ø–ª–∞—Ç—Ñ–æ—Ä–º—É!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=client_keyboard()
    )

@client_router.message(ClientRegistration.name)
async def process_client_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(name=name)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ClientRegistration.phone)

@client_router.message(ClientRegistration.phone)
async def process_client_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_REGEX.match(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(phone=phone)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∑–∞–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(ClientRegistration.address)

@client_router.message(ClientRegistration.address)
async def process_client_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if len(address) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    update_user(
        tg_id=message.from_user.id,
        name=data.get('name', message.from_user.full_name),
        phone=data.get('phone'),
        address=address
    )
    await state.clear()
    await show_client_menu(message)

@client_router.message(F.text == "üõí –ö–∞—Ç–∞–ª–æ–≥")
async def handle_catalog(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    categories = get_categories()  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (parent_id IS NULL)
    
    if not categories:
        await message.answer("üòî –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã")
        return
    
    builder = InlineKeyboardBuilder()
    for cat_id, cat_name in categories:
        builder.add(types.InlineKeyboardButton(
            text=cat_name,
            callback_data=f"main_category_{cat_id}")
        )
    builder.row(types.InlineKeyboardButton(
        text="üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤",
        callback_data="product_search")
    )
    builder.adjust(2)
    
    await message.answer(
        "üìö –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º:",
        reply_markup=builder.as_markup()
    )

@client_router.callback_query(F.data.startswith("main_category_"))
async def show_main_category(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        main_category_id = int(callback.data.split("_")[2])
        subcategories = get_categories(parent_id=main_category_id)
        
        if not subcategories:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
            await show_category_products(callback, main_category_id, 0)
            return
        
        builder = InlineKeyboardBuilder()
        for cat_id, cat_name in subcategories:
            builder.add(types.InlineKeyboardButton(
                text=cat_name,
                callback_data=f"subcategory_{cat_id}")
            )
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ –æ—Å–Ω–æ–≤–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        builder.row(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main_categories")
        )
        
        builder.adjust(2)
        
        await callback.message.edit_text(
            "üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    finally:
        await callback.answer()

@client_router.callback_query(F.data == "back_to_main_categories")
async def back_to_main_categories(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    await handle_catalog(callback.message)
    await callback.answer()

@client_router.callback_query(F.data.startswith("subcategory_"))
async def show_subcategory_products(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        category_id = int(callback.data.split("_")[1])
        await show_category_products(callback, category_id, 0)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–æ–≤")
    finally:
        await callback.answer()

async def show_category_products(callback: CallbackQuery, category_id: int, page: int = 0, limit: int = 10):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π)"""
    offset = page * limit
    products = get_visible_products(category_id, offset, limit)
    total_products = get_category_products_count(category_id)
    total_pages = (total_products + limit - 1) // limit
    
    builder = InlineKeyboardBuilder()
    if not products:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
        category_info = get_category(category_id)
        parent_id = category_info[2] if category_info else None
        
        if parent_id:
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
            builder.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data=f"main_category_{parent_id}")
            )
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            builder.add(types.InlineKeyboardButton(
                text="üîô –ù–∞–∑–∞–¥",
                callback_data="back_to_main_categories")
            )
        
        await callback.message.edit_text(
            "üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤",
            reply_markup=builder.as_markup()
        )
        return
    
    for product in products:
        product_id, name, price, in_stock, quantity = product
        stock_text = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if in_stock else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        builder.add(types.InlineKeyboardButton(
            text=f"{name} - {price} —Ä—É–±. ({stock_text})",
            callback_data=f"product_{product_id}")
        )
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    category_info = get_category(category_id)
    parent_id = category_info[2] if category_info else None
    
    if parent_id:
        # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        builder.row(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data=f"main_category_{parent_id}")
        )
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–ø–∏—Å–∫—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        builder.row(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥",
            callback_data="back_to_main_categories")
        )
    
    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
    if total_pages > 1:
        builder.row()
        pagination_kb = pagination_keyboard(category_id, page, total_pages)
        builder.attach(pagination_kb)
    
    builder.adjust(2)
    
    await callback.message.edit_text(
        f"üõçÔ∏è –¢–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page+1}/{total_pages}):",
        reply_markup=builder.as_markup()
    )

@client_router.callback_query(F.data.startswith("page_"))
async def handle_pagination(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        category_id = int(parts[1])
        page = int(parts[2])
        await show_category_products(callback, category_id, page)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
    finally:
        await callback.answer()

@client_router.callback_query(F.data.startswith("product_"))
async def show_product(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[1])
        product = get_product_details(product_id)
        
        if not product or not product[7]:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º approved (–∏–Ω–¥–µ–∫—Å 7)
            await callback.message.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer()
            return
        
        name = product[1]
        description = product[2]
        price = product[4]  # –ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞ —Å –Ω–∞—Ü–µ–Ω–∫–æ–π (–∏–Ω–¥–µ–∫—Å 4)
        in_stock = product[9]
        quantity = product[10]
        
        stock_text = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if in_stock else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        
        builder = InlineKeyboardBuilder()
        if in_stock:
            builder.add(types.InlineKeyboardButton(
                text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É",
                callback_data=f"add_to_cart_{product_id}")
            )
            builder.add(types.InlineKeyboardButton(
                text="üîÑ –î–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π",
                callback_data=f"add_recurring_{product_id}")
            )
        
        await callback.message.edit_text(
            f"<b>{name}</b>\n\n"
            f"{description}\n\n"
            f"üí∞ –¶–µ–Ω–∞: <b>{price} —Ä—É–±.</b>\n"
            f"üì¶ –ù–∞–ª–∏—á–∏–µ: <b>{stock_text}</b>\n"
            f"üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{quantity} —à—Ç.</b>",
            parse_mode="HTML",
            reply_markup=builder.as_markup() if builder.buttons else None
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ç–æ–≤–∞—Ä–∞")
    finally:
        await callback.answer()

@client_router.callback_query(F.data.startswith("add_to_cart_"))
async def add_product_to_cart(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[3])
        success, message = add_to_cart(callback.from_user.id, product_id)
        
        if success:
            await callback.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        else:
            await callback.answer(f"‚ùå {message}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@client_router.callback_query(F.data.startswith("add_recurring_"))
async def add_recurring_product(callback: CallbackQuery, state: FSMContext):
    try:
        product_id = int(callback.data.split("_")[2])
        product = get_product_details(product_id)
        
        if not product or not product[7]:
            await callback.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return
        
        await state.update_data(product_id=product_id)
        await callback.message.answer("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:", reply_markup=recurring_type_keyboard())
        await state.set_state(OrderForm.recurring_type)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@client_router.callback_query(F.data.startswith("recurring_"), OrderForm.recurring_type)
async def process_recurring_type(callback: CallbackQuery, state: FSMContext):
    recurring_type = callback.data.split("_")[1]
    await state.update_data(recurring_type=recurring_type)
    
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É –∫–∞–∫ —Å–ª–µ–¥—É—é—â—É—é –¥–æ—Å—Ç–∞–≤–∫—É
    next_delivery = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    await state.update_data(next_delivery=next_delivery)
    
    data = await state.get_data()
    product_id = data.get('product_id')
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π
    success, message = add_to_cart(
        callback.from_user.id, 
        product_id, 
        is_recurring=True, 
        recurring_type=recurring_type, 
        next_delivery=next_delivery
    )
    
    if success:
        await callback.message.answer(f"‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–∫–∞–∑ ({RECURRING_TYPES[recurring_type]})")
    else:
        await callback.message.answer(f"‚ùå {message}")
    
    await state.clear()
    await callback.answer()

@client_router.message(F.text == "üì¶ –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    cart_items = get_cart(message.from_user.id)
    
    if not cart_items:
        await message.answer("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        return
    
    total = 0
    cart_text = "üõí –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∫–æ—Ä–∑–∏–Ω—ã:\n\n"
    builder = InlineKeyboardBuilder()
    
    for item in cart_items:
        cart_id, product_id, name, price, quantity, is_recurring, recurring_type, next_delivery = item
        item_total = price * quantity
        total += item_total
        
        cart_text += f"‚ñ™Ô∏è {name}\n  - {quantity} —à—Ç. x {price} —Ä—É–±. = {item_total} —Ä—É–±.\n"
        
        if is_recurring:
            cart_text += f"  üîÑ –†–µ–≥—É–ª—è—Ä–Ω—ã–π ({RECURRING_TYPES.get(recurring_type, recurring_type)}), –¥–æ—Å—Ç–∞–≤–∫–∞: {next_delivery}\n"
        
        builder.row(
            types.InlineKeyboardButton(
                text=f"‚ùå {name[:15]}...",
                callback_data=f"remove_{cart_id}"
            ),
            types.InlineKeyboardButton(
                text="‚ûñ",
                callback_data=f"decr_{cart_id}"
            ),
            types.InlineKeyboardButton(
                text=f"{quantity}",
                callback_data="no_action"
            ),
            types.InlineKeyboardButton(
                text="‚ûï",
                callback_data=f"incr_{cart_id}"
            )
        )
    
    cart_text += f"\nüíµ –ò—Ç–æ–≥–æ: {total} —Ä—É–±."
    
    # –ò–∑–º–µ–Ω–µ–Ω–æ: –ø–æ–º–µ–Ω—è–ª–∏ –º–µ—Å—Ç–∞–º–∏ –∫–Ω–æ–ø–∫–∏ "–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É" –∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
    builder.row(
        types.InlineKeyboardButton(
            text="üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É",
            callback_data="clear_cart"
        ),
        types.InlineKeyboardButton(
            text="üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data="checkout"
        )
    )
    
    await message.answer(
        cart_text,
        reply_markup=builder.as_markup()
    )

@client_router.callback_query(F.data == "no_action")
async def no_action(callback: CallbackQuery):
    await callback.answer()

@client_router.callback_query(F.data.startswith("decr_"))
async def decrease_quantity(callback: CallbackQuery):
    cart_id = int(callback.data.split("_")[1])
    success, message = update_cart_quantity(cart_id, -1)
    
    if success:
        await callback.answer("‚ûñ –£–º–µ–Ω—å—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        await show_cart(callback.message)
    else:
        await callback.answer(f"‚ùå {message}")

@client_router.callback_query(F.data.startswith("incr_"))
async def increase_quantity(callback: CallbackQuery):
    cart_id = int(callback.data.split("_")[1])
    success, message = update_cart_quantity(cart_id, 1)
    
    if success:
        await callback.answer("‚ûï –£–≤–µ–ª–∏—á–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
        await show_cart(callback.message)
    else:
        await callback.answer(f"‚ùå {message}")

@client_router.callback_query(F.data.startswith("remove_"))
async def remove_item(callback: CallbackQuery):
    cart_id = int(callback.data.split("_")[1])
    remove_from_cart(cart_id)
    await callback.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
    await show_cart(callback.message)

@client_router.callback_query(F.data == "checkout")
async def start_checkout(callback: CallbackQuery, state: FSMContext):
    user = get_user(callback.from_user.id)
    address = user[6] if user else None
    
    if address:
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(
            text="üè† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π –∞–¥—Ä–µ—Å",
            callback_data="use_my_address")
        )
        builder.add(types.InlineKeyboardButton(
            text="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∞–¥—Ä–µ—Å",
            callback_data="enter_new_address")
        )
        
        await callback.message.answer(
            f"üè† –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: {address}\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=builder.as_markup()
        )
    else:
        await callback.message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(OrderForm.address)
    
    await callback.answer()

@client_router.callback_query(F.data == "use_my_address")
async def use_my_address(callback: CallbackQuery, state: FSMContext):
    user = get_user(callback.from_user.id)
    if user and user[6]:
        await state.update_data(address=user[6])
        await callback.message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
        await state.set_state(OrderForm.comment)
    else:
        await callback.message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
        await state.set_state(OrderForm.address)
    
    await callback.answer()

@client_router.callback_query(F.data == "enter_new_address")
async def enter_new_address(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(OrderForm.address)
    await callback.answer()

@client_router.message(OrderForm.address)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if len(address) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(address=address)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):")
    await state.set_state(OrderForm.comment)

@client_router.message(OrderForm.comment)
async def process_comment(message: types.Message, state: FSMContext):
    comment = message.text if message.text != "/skip" else ""
    if len(comment) > 500:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(comment=comment)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–æ—Ä–∑–∏–Ω–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
    cart_items = get_cart(message.from_user.id)
    has_recurring = any(item[5] for item in cart_items)  # is_recurring flag
    
    if has_recurring:
        await message.answer("üîÑ –í –≤–∞—à–µ–π –∫–æ—Ä–∑–∏–Ω–µ –µ—Å—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã. –û—Ñ–æ—Ä–º–∏—Ç—å –≤–µ—Å—å –∑–∞–∫–∞–∑ –∫–∞–∫ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π? (–¥–∞/–Ω–µ—Ç)")
        await state.set_state(OrderForm.recurring)
    else:
        data = await state.get_data()
        await complete_order(message, data)
        await state.clear()

@client_router.message(OrderForm.recurring)
async def process_recurring_choice(message: types.Message, state: FSMContext):
    if message.text.lower() in ["–¥–∞", "yes", "y"]:
        await message.answer("üîÑ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:", reply_markup=recurring_type_keyboard())
        await state.set_state(OrderForm.recurring_type)
    elif message.text.lower() in ["–Ω–µ—Ç", "no", "n"]:
        data = await state.get_data()
        await complete_order(message, data)
        await state.clear()
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'")

@client_router.callback_query(F.data.startswith("recurring_"), OrderForm.recurring_type)
async def process_recurring_type_choice(callback: CallbackQuery, state: FSMContext):
    recurring_type = callback.data.split("_")[1]
    await state.update_data(recurring_type=recurring_type)
    
    # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≤—Ç—Ä–∞—à–Ω—é—é –¥–∞—Ç—É
    next_delivery = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
    await state.update_data(next_delivery=next_delivery)
    
    data = await state.get_data()
    await complete_order(callback.message, data, is_recurring=True)
    await state.clear()
    await callback.answer()

async def complete_order(message: types.Message, data, is_recurring=False):
    recurring_type = data.get('recurring_type')
    next_delivery = data.get('next_delivery')
    
    order_id, error = create_order(
        message.from_user.id,
        data.get('address', ''),
        data.get('comment', ''),
        is_recurring,
        recurring_type,
        next_delivery
    )
    
    if order_id:
        status_text = "—Ä–µ–≥—É–ª—è—Ä–Ω—ã–π" if is_recurring else "—Ä–∞–∑–æ–≤—ã–π"
        delivery_text = f"\nüìÖ –°–ª–µ–¥—É—é—â–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {next_delivery}" if is_recurring else ""
        
        await message.answer(
            f"üéâ {status_text.capitalize()} –∑–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!{delivery_text}"
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤
        await notify_admins_about_order(order_id)
        await notify_suppliers_about_order(order_id)
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑: {error}")

@client_router.callback_query(F.data == "clear_cart")
async def clear_user_cart(callback: CallbackQuery):
    clear_cart(callback.from_user.id)
    await callback.message.answer("üóëÔ∏è –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞")
    await callback.answer()

@client_router.message(F.text == "üìù –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_orders(message: types.Message):
    orders = get_user_orders(message.from_user.id)
    
    if not orders:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    builder = InlineKeyboardBuilder()
    for order in orders:
        order_id, total, status, created_at, is_recurring, recurring_type, next_delivery = order
        status_text = ORDER_STATUSES.get(status, status)
        recurring_text = " üîÑ" if is_recurring else ""
        builder.add(types.InlineKeyboardButton(
            text=f"–ó–∞–∫–∞–∑ #{order_id} - {total} —Ä—É–±. ({status_text}){recurring_text}",
            callback_data=f"order_details_{order_id}")
        )
    
    await message.answer(
        "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:",
        reply_markup=builder.as_markup()
    )

@client_router.message(F.text == "üîÑ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã")
async def handle_recurring_orders(message: types.Message):
    orders = get_user_orders(message.from_user.id)
    
    if not orders:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
        return
    
    recurring_orders = [order for order in orders if order[4]]  # is_recurring
    
    if not recurring_orders:
        await message.answer("üîÑ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
        return
    
    text = "üîÑ –í–∞—à–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã:\n\n"
    for order in recurring_orders:
        order_id, total, status, created_at, is_recurring, recurring_type, next_delivery = order
        status_text = ORDER_STATUSES.get(status, status)
        text += (
            f"‚ñ™Ô∏è <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
            f"  - –¢–∏–ø: {RECURRING_TYPES.get(recurring_type, recurring_type)}\n"
            f"  - –°–ª–µ–¥—É—é—â–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {next_delivery}\n"
            f"  - –°—Ç–∞—Ç—É—Å: {status_text}\n"
            f"  - –°—É–º–º–∞: {total} —Ä—É–±.\n\n"
        )
    
    await message.answer(text, parse_mode="HTML")

@client_router.callback_query(F.data.startswith("order_details_"))
async def show_order_details(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    order, items = get_order_details(order_id)
    
    if not order:
        await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        await callback.answer()
        return
    
    _, customer_id, total, status, created_at, is_recurring, recurring_type, next_delivery, parent_order_id = order
    status_text = ORDER_STATUSES.get(status, status)
    
    order_text = (
        f"üì¶ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
        f"üí≥ –°—É–º–º–∞: <b>{total} —Ä—É–±.</b>\n"
        f"üìÆ –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
        f"üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <b>{created_at}</b>\n"
    )
    
    if is_recurring:
        order_text += (
            f"üîÑ –¢–∏–ø: <b>{RECURRING_TYPES.get(recurring_type, recurring_type)}</b>\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: <b>{next_delivery}</b>\n"
        )
    
    order_text += "\nüõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    
    for item in items:
        name, quantity, price = item
        order_text += f"‚ñ™Ô∏è {name} - {quantity} —à—Ç. x {price} —Ä—É–±.\n"
    
    await callback.message.edit_text(
        order_text,
        parse_mode="HTML"
    )
    await callback.answer()

@client_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_keyboard()
    )

@client_router.callback_query(F.data == "faq")
async def show_client_faq(callback: CallbackQuery):
    faq_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ü–æ–∫—É–ø–∞—Ç–µ–ª—å):</b>\n\n"
        "1. <b>–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?</b>\n"
        "   - –í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ, –¥–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ—Ä–∑–∏–Ω—É –∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑.\n\n"
        "2. <b>–ö–∞–∫ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑?</b>\n"
        "   - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –¥–æ –µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏.\n\n"
        "3. <b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—É—é –¥–æ—Å—Ç–∞–≤–∫—É?</b>\n"
        "   - –ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞.\n\n"
        "4. <b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏?</b>\n"
        "   - –í –∫–æ—Ä–∑–∏–Ω–µ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å.\n"
    )
    await callback.message.edit_text(faq_text, parse_mode="HTML")

@client_router.callback_query(F.data == "ask_question")
async def ask_question(callback: CallbackQuery):
    await callback.message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @Restiify",
        disable_web_page_preview=True
    )

@client_router.callback_query(F.data == "product_search")
async def start_product_search(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    await state.set_state(SearchForm.query)
    await callback.answer()

@client_router.message(SearchForm.query)
async def process_search_query(message: types.Message, state: FSMContext):
    query = message.text.strip()
    if not query:
        await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    products = search_products(query)
    
    if not products:
        await message.answer("üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    builder = InlineKeyboardBuilder()
    for product in products:
        product_id, name, price, in_stock, quantity = product
        stock_text = "‚úÖ –í –Ω–∞–ª–∏—á–∏–∏" if in_stock else "‚ùå –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
        builder.add(types.InlineKeyboardButton(
            text=f"{name} - {price} —Ä—É–±. ({stock_text})",
            callback_data=f"product_{product_id}")
        )
    
    builder.row(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –≤ –∫–∞—Ç–∞–ª–æ–≥",
        callback_data="back_to_main_categories")
    )
    
    await message.answer(
        f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':",
        reply_markup=builder.as_markup()
    )
    await state.clear()

@client_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_client_profile(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –∫–ª–∏–µ–Ω—Ç–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    _, _, name, role, company, phone, address, _ = user
    
    profile_text = (
        "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}\n"
        f"üë§ <b>–ò–º—è:</b> {name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:</b> {address}\n"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data="client_edit_profile")
    )
    
    await message.answer(
        profile_text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@client_router.callback_query(F.data == "client_edit_profile")
async def start_client_edit_profile(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–∞"""
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(EditProfile.name)
    await callback.answer()

@client_router.message(EditProfile.name)
async def process_client_edit_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤–æ–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞"""
    name = message.text.strip()
    if len(name) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(name=name)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(EditProfile.phone)

@client_router.message(EditProfile.phone)
async def process_client_edit_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞"""
    phone = message.text.strip()
    if not PHONE_REGEX.match(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(phone=phone)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await state.set_state(EditProfile.address)

@client_router.message(EditProfile.address)
async def process_client_edit_address(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    address = message.text.strip()
    if len(address) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    update_user(
        tg_id=message.from_user.id,
        name=data.get('name', message.from_user.full_name),
        phone=data.get('phone'),
        address=address
    )
    await state.clear()
    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await handle_client_profile(message)  # –ü–æ–∫–∞–∑–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å

# ====================== –ë–û–¢ –ü–û–°–¢–ê–í–©–ò–ö–ê ======================
supplier_router = Router()

@supplier_router.message(Command("start"))
async def supplier_start(message: types.Message, state: FSMContext):
    user = get_user(message.from_user.id)
    if user and user[5] and user[6]:  # –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –∏ –∞–¥—Ä–µ—Å
        await show_supplier_menu(message)
    else:
        add_user(message.from_user.id, message.from_user.full_name, "supplier", "Unknown")
        await message.answer("üè≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:", 
                            reply_markup=ReplyKeyboardRemove())
        await state.set_state(SupplierRegistration.name)

async def show_supplier_menu(message: types.Message):
    await message.answer(
        "üè≠ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø–æ—Å—Ç–∞–≤—â–∏–∫!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=supplier_keyboard()
    )

@supplier_router.message(SupplierRegistration.name)
async def process_supplier_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(name=name)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SupplierRegistration.phone)

@supplier_router.message(SupplierRegistration.phone)
async def process_supplier_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_REGEX.match(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(phone=phone)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å (–¥–ª—è –∑–∞–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤):", reply_markup=ReplyKeyboardRemove())
    await state.set_state(SupplierRegistration.address)

@supplier_router.message(SupplierRegistration.address)
async def process_supplier_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if len(address) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    update_user(
        tg_id=message.from_user.id,
        name=data.get('name', message.from_user.full_name),
        phone=data.get('phone'),
        address=address
    )
    await state.clear()
    await show_supplier_menu(message)

@supplier_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def handle_profile(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    _, _, name, role, company, phone, address, _ = user
    
    profile_text = (
        "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}\n"
        f"üë§ <b>–ò–º—è:</b> {name}\n"
        f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
        f"üè† <b>–ê–¥—Ä–µ—Å:</b> {address}\n"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data="edit_profile")
    )
    
    await message.answer(
        profile_text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )

@supplier_router.callback_query(F.data == "edit_profile")
async def start_edit_profile(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:")
    await state.set_state(EditProfile.name)
    await callback.answer()

@supplier_router.message(EditProfile.name)
async def process_edit_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(name=name)
    await message.answer("üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(EditProfile.phone)

@supplier_router.message(EditProfile.phone)
async def process_edit_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip()
    if not PHONE_REGEX.match(phone):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(phone=phone)
    await message.answer("üè† –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å:")
    await state.set_state(EditProfile.address)

@supplier_router.message(EditProfile.address)
async def process_edit_address(message: types.Message, state: FSMContext):
    address = message.text.strip()
    if len(address) > 200:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∞–∫—Å. 200 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    update_user(
        tg_id=message.from_user.id,
        name=data.get('name', message.from_user.full_name),
        phone=data.get('phone'),
        address=address
    )
    await state.clear()
    await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    await handle_profile(message)

@supplier_router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä")
async def handle_add_product(message: types.Message, state: FSMContext):
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(ProductForm.name)

@supplier_router.message(ProductForm.name)
async def process_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(name=name)
    await message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(ProductForm.description)

@supplier_router.message(ProductForm.description)
async def process_description(message: types.Message, state: FSMContext):
    description = message.text.strip()
    if len(description) > 500:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    await state.update_data(description=description)
    await message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ (—á–∏—Å–ª–æ):")
    await state.set_state(ProductForm.price)

@supplier_router.message(ProductForm.price)
async def process_price(message: types.Message, state: FSMContext):
    try:
        supplier_price = float(message.text)
        if supplier_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(price=supplier_price)
        await message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
        await state.set_state(ProductForm.quantity)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@supplier_router.message(ProductForm.quantity)
async def process_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        await state.update_data(quantity=quantity)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
        categories = get_categories()  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        
        if not categories:
            await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
            await state.clear()
            return
        
        builder = InlineKeyboardBuilder()
        for cat_id, cat_name in categories:
            builder.add(types.InlineKeyboardButton(
                text=cat_name,
                callback_data=f"select_main_category_{cat_id}")
            )
        builder.adjust(2)
        
        await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
        await state.set_state(ProductForm.category)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")

@supplier_router.callback_query(F.data.startswith("select_main_category_"))
async def select_main_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        main_category_id = int(callback.data.split("_")[3])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(main_category_id=main_category_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        subcategories = get_categories(parent_id=main_category_id)
        
        if not subcategories:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—é
            data = await state.get_data()
            await state.update_data(category_id=main_category_id)
            await complete_product_add(callback, state)
            return
        
        builder = InlineKeyboardBuilder()
        for cat_id, cat_name in subcategories:
            builder.add(types.InlineKeyboardButton(
                text=cat_name,
                callback_data=f"select_subcategory_{cat_id}")
            )
        builder.adjust(2)
        
        await callback.message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        await callback.answer()

@supplier_router.callback_query(F.data.startswith("select_subcategory_"))
async def select_subcategory(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        subcategory_id = int(callback.data.split("_")[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(category_id=subcategory_id)
        await complete_product_add(callback, state)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        await callback.answer()

async def complete_product_add(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
    try:
        data = await state.get_data()
        category_id = data.get('category_id')
        supplier_price = data.get('price')
        quantity = data.get('quantity', 0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        product_id = add_product(
            name=data['name'],
            description=data['description'],
            supplier_price=supplier_price,
            category_id=category_id,
            supplier_id=callback.from_user.id,
            quantity=quantity,
            approved=False
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫—É
        await callback.message.answer(
            "‚è≥ –í–∞—à —Ç–æ–≤–∞—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. "
            "–î–æ–∂–¥–∏—Ç–µ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        )
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await notify_admins_about_product(product_id)
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@supplier_router.message(F.text == "üì¶ –ú–æ–∏ —Ç–æ–≤–∞—Ä—ã")
async def handle_products(message: types.Message):
    try:
        products = get_supplier_products(message.from_user.id)
        
        if not products:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤")
            return
        
        builder = InlineKeyboardBuilder()
        for product in products:
            product_id, name, supplier_price, approved, in_stock, quantity = product
            status_icon = "‚úÖ" if approved else "‚è≥"
            stock_icon = "üü¢" if in_stock else "üî¥"
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–ª—å–∫–æ supplier_price –¥–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            builder.add(types.InlineKeyboardButton(
                text=f"{status_icon}{stock_icon} {name} - {supplier_price} —Ä—É–±. ({quantity} —à—Ç.)",
                callback_data=f"edit_product_{product_id}")
            )
        builder.adjust(1)
        
        await message.answer(
            "üìã –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")

@supplier_router.callback_query(F.data.startswith("edit_product_"))
async def edit_product_menu(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[2])
    product = get_product_details(product_id)
    
    if not product:
        await callback.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º product_id –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(product_id=product_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Ç–æ–≤–∞—Ä–∞
    name = product[1]
    supplier_price = product[3]
    approved = product[7]
    in_stock = product[9]
    quantity = product[10]
    
    status_text = "‚úÖ –û–¥–æ–±—Ä–µ–Ω" if approved else "‚è≥ –ù–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
    stock_text = "üü¢ –í –Ω–∞–ª–∏—á–∏–∏" if in_stock else "üî¥ –ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏"
    
    text = (
        f"üì¶ <b>{name}</b>\n\n"
        f"üí∞ <b>–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:</b> {supplier_price} —Ä—É–±.\n"
        f"üìä <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
        f"üìå <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"üõí <b>–ù–∞–ª–∏—á–∏–µ:</b> {stock_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
        callback_data=f"edit_item_{product_id}"))
    builder.add(types.InlineKeyboardButton(
        text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ",
        callback_data=f"toggle_stock_{product_id}"))
    builder.add(types.InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
        callback_data=f"delete_item_{product_id}"))
    builder.add(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥",
        callback_data="back_to_products"))
    builder.adjust(1)
    
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@supplier_router.callback_query(F.data.startswith("toggle_stock_"))
async def toggle_product_stock_handler(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    in_stock = toggle_product_stock(product_id)
    await callback.answer(f"–ù–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ: {'–í –Ω–∞–ª–∏—á–∏–∏' if in_stock else '–ù–µ—Ç –≤ –Ω–∞–ª–∏—á–∏–∏'}")
    await edit_product_menu(callback, None)  # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é

@supplier_router.callback_query(F.data.startswith("edit_item_"))
async def choose_edit_field(callback: CallbackQuery, state: FSMContext):
    product_id = int(callback.data.split("_")[2])
    await state.update_data(product_id=product_id)
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="–ù–∞–∑–≤–∞–Ω–∏–µ", callback_data="edit_name"))
    builder.add(types.InlineKeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description"))
    builder.add(types.InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data="edit_price"))
    builder.add(types.InlineKeyboardButton(text="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", callback_data="edit_quantity"))
    builder.add(types.InlineKeyboardButton(text="–ö–∞—Ç–µ–≥–æ—Ä–∏—è", callback_data="edit_category"))
    builder.add(types.InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_product_{product_id}"))
    builder.adjust(2)
    
    await callback.message.edit_text(
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@supplier_router.callback_query(F.data == "edit_name")
async def edit_product_name(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(EditProduct.name)
    await callback.answer()

@supplier_router.message(EditProduct.name)
async def process_edit_name(message: types.Message, state: FSMContext):
    name = message.text.strip()
    if len(name) > 100:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–º–∞–∫—Å. 100 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    product_id = data.get('product_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    update_product(product_id, name=name)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    await notify_admins_about_product(product_id)
    
    await message.answer("‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await state.clear()

@supplier_router.callback_query(F.data == "edit_description")
async def edit_product_description(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üìÑ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤):")
    await state.set_state(EditProduct.description)
    await callback.answer()

@supplier_router.message(EditProduct.description)
async def process_edit_description(message: types.Message, state: FSMContext):
    description = message.text.strip()
    if len(description) > 500:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    product_id = data.get('product_id')
    
    update_product(product_id, description=description)
    
    await notify_admins_about_product(product_id)
    await message.answer("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await state.clear()

@supplier_router.callback_query(F.data == "edit_price")
async def edit_product_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üí∞ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(EditProduct.price)
    await callback.answer()

@supplier_router.message(EditProduct.price)
async def process_edit_price(message: types.Message, state: FSMContext):
    try:
        new_price = float(message.text)
        if new_price <= 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        product_id = data.get('product_id')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        update_product(product_id, supplier_price=new_price)
        
        await notify_admins_about_product(product_id)
        await message.answer("‚úÖ –¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

@supplier_router.callback_query(F.data == "edit_quantity")
async def edit_product_quantity(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("üì¶ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ:")
    await state.set_state(EditProduct.quantity)
    await callback.answer()

@supplier_router.message(EditProduct.quantity)
async def process_edit_quantity(message: types.Message, state: FSMContext):
    try:
        quantity = int(message.text)
        if quantity < 0:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
            return
        
        data = await state.get_data()
        product_id = data.get('product_id')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        update_product(product_id, quantity=quantity)
        
        await notify_admins_about_product(product_id)
        await message.answer("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –¢–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        await state.clear()
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ:")

@supplier_router.callback_query(F.data == "edit_category")
async def edit_product_category(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = get_categories()
    builder = InlineKeyboardBuilder()
    for cat_id, cat_name in categories:
        builder.add(types.InlineKeyboardButton(text=cat_name, callback_data=f"select_edit_main_category_{cat_id}"))
    builder.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
    await callback.answer()

@supplier_router.callback_query(F.data.startswith("select_edit_main_category_"))
async def select_edit_main_category(callback: CallbackQuery, state: FSMContext):
    main_category_id = int(callback.data.split("_")[4])
    await state.update_data(main_category_id=main_category_id)
    
    subcategories = get_categories(parent_id=main_category_id)
    if not subcategories:
        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Ç–æ –≤—ã–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        data = await state.get_data()
        product_id = data.get('product_id')
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞
        update_product(product_id, category_id=main_category_id)
        
        await callback.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
        await state.clear()
        await notify_admins_about_product(product_id)
        return
    
    builder = InlineKeyboardBuilder()
    for cat_id, cat_name in subcategories:
        builder.add(types.InlineKeyboardButton(text=cat_name, callback_data=f"select_edit_subcategory_{cat_id}"))
    builder.adjust(2)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=builder.as_markup())
    await callback.answer()

@supplier_router.callback_query(F.data.startswith("select_edit_subcategory_"))
async def select_edit_subcategory(callback: CallbackQuery, state: FSMContext):
    subcategory_id = int(callback.data.split("_")[4])
    data = await state.get_data()
    product_id = data.get('product_id')
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    update_product(product_id, category_id=subcategory_id)
    
    await callback.message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞! –¢–æ–≤–∞—Ä —Å–Ω–æ–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.")
    await state.clear()
    await notify_admins_about_product(product_id)
    await callback.answer()

@supplier_router.callback_query(F.data.startswith("delete_item_"))
async def delete_product_confirm(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚úÖ –î–∞",
        callback_data=f"confirm_delete_{product_id}")
    )
    builder.add(types.InlineKeyboardButton(
        text="‚ùå –ù–µ—Ç",
        callback_data=f"edit_product_{product_id}")
    )
    
    await callback.message.edit_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä?",
        reply_markup=builder.as_markup()
    )
    await callback.answer()

@supplier_router.callback_query(F.data.startswith("confirm_delete_"))
async def delete_product_execute(callback: CallbackQuery):
    product_id = int(callback.data.split("_")[2])
    
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("DELETE FROM products WHERE id = ?", (product_id,))
    conn.commit()
    conn.close()
    
    await callback.message.answer("üóëÔ∏è –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω!")
    await callback.answer()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Ç–æ–≤–∞—Ä–æ–≤
    await handle_products(callback.message)

@supplier_router.callback_query(F.data == "back_to_products")
async def back_to_products(callback: CallbackQuery):
    await handle_products(callback.message)
    await callback.answer()

@supplier_router.message(F.text == "üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã")
async def handle_supplier_orders(message: types.Message):
    try:
        order_ids = get_supplier_orders(message.from_user.id)
        if not order_ids:
            await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤")
            return
        
        builder = InlineKeyboardBuilder()
        for order_id in order_ids:
            builder.add(types.InlineKeyboardButton(
                text=f"–ó–∞–∫–∞–∑ #{order_id}",
                callback_data=f"supplier_order_{order_id}")
            )
        
        await message.answer(
            "üìã –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")

@supplier_router.callback_query(F.data.startswith("supplier_order_"))
async def handle_supplier_order_details(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[2])
        items = get_supplier_order_items(order_id, callback.from_user.id)
        
        if not items:
            await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        status_info = get_supplier_order_status(order_id, callback.from_user.id)
        status = status_info[0] if status_info else "pending"
        problem = status_info[1] if status_info else None
        
        status_text = {
            'pending': "–æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏",
            'ready': "–≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ",
            'problem': "–µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã"
        }.get(status, status)
        
        text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
            f"üìÆ –°—Ç–∞—Ç—É—Å: <b>{status_text}</b>\n"
        )
        
        if problem:
            text += f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {problem}\n"
        
        text += "\nüõí –í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑–µ:\n"
        
        for item in items:
            name, quantity, price = item
            # –î–ª—è –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º supplier_price
            text += f"‚ñ™Ô∏è {name} - {quantity} —à—Ç. x {price} —Ä—É–±.\n"
        
        builder = InlineKeyboardBuilder()
        if status != 'ready':
            builder.add(types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å",
                callback_data=f"supplier_ready_{order_id}")
            )
        if status != 'problem':
            builder.add(types.InlineKeyboardButton(
                text="‚ùå –°–æ–æ–±—â–∏—Ç—å –æ –ø—Ä–æ–±–ª–µ–º–µ",
                callback_data=f"supplier_problem_{order_id}")
            )
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=builder.as_markup() if builder.buttons else None
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")
    finally:
        await callback.answer()

@supplier_router.callback_query(F.data.startswith("supplier_ready_"))
async def handle_supplier_ready(callback: CallbackQuery):
    order_id = int(callback.data.split("_")[2])
    update_supplier_status(order_id, callback.from_user.id, "ready")
    await callback.message.answer("‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: –¢–æ–≤–∞—Ä –≥–æ—Ç–æ–≤ –∫ –ø–µ—Ä–µ–¥–∞—á–µ")
    await notify_admin_about_supplier_status(order_id, callback.from_user.id, "ready")
    await callback.answer()

@supplier_router.callback_query(F.data.startswith("supplier_problem_"))
async def handle_supplier_problem(callback: CallbackQuery, state: FSMContext):
    order_id = int(callback.data.split("_")[2])
    await state.update_data(order_id=order_id)
    await callback.message.answer("üìù –û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É —Å —Ç–æ–≤–∞—Ä–æ–º:")
    await state.set_state(SupplierProblem.description)
    await callback.answer()

@supplier_router.message(SupplierProblem.description)
async def process_problem_description(message: types.Message, state: FSMContext):
    problem = message.text.strip()
    if len(problem) > 500:
        await message.answer("‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–º–∞–∫—Å. 500 —Å–∏–º–≤–æ–ª–æ–≤). –í–≤–µ–¥–∏—Ç–µ —Å–Ω–æ–≤–∞:")
        return
    
    data = await state.get_data()
    order_id = data.get('order_id')
    
    update_supplier_status(order_id, message.from_user.id, "problem", problem)
    await message.answer("‚úÖ –ü—Ä–æ–±–ª–µ–º–∞ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    await notify_admin_about_supplier_status(order_id, message.from_user.id, "problem", problem)
    await state.clear()

@supplier_router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def handle_help(message: types.Message):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –ø–æ–º–æ—â–∏:",
        reply_markup=help_keyboard()
    )

@supplier_router.callback_query(F.data == "faq")
async def show_supplier_faq(callback: CallbackQuery):
    faq_text = (
        "‚ùì <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ü–æ—Å—Ç–∞–≤—â–∏–∫):</b>\n\n"
        "1. <b>–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä?</b>\n"
        "   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä'. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é.\n\n"
        "2. <b>–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –º–æ–¥–µ—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–∞?</b>\n"
        "   - –û–±—ã—á–Ω–æ –¥–æ 24 —á–∞—Å–æ–≤. –í —Å–ª—É—á–∞–µ –∑–∞–¥–µ—Ä–∂–∫–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n\n"
        "3. <b>–ö–∞–∫ —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞?</b>\n"
        "   - –í —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã' –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–æ–≤ —Å –≤–∞—à–∏–º–∏ —Ç–æ–≤–∞—Ä–∞–º–∏.\n\n"
        "4. <b>–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è?</b>\n"
        "   - –í —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ—Ñ–∏–ª—å' –Ω–∞–∂–º–∏—Ç–µ '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'.\n"
    )
    await callback.message.edit_text(faq_text, parse_mode="HTML")

@supplier_router.callback_query(F.data == "ask_question")
async def ask_question(callback: CallbackQuery):
    await callback.message.answer(
        "–ï—Å–ª–∏ —É –≤–∞—Å –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @Restiify",
        disable_web_page_preview=True
    )

# ====================== –ê–î–ú–ò–ù –ë–û–¢ ======================
admin_router = Router()

@admin_router.message(Command("start"))
async def admin_start(message: types.Message, state: FSMContext):
    conn = sqlite3.connect('b2b.db')
    cur = conn.cursor()
    cur.execute("SELECT role FROM users WHERE tg_id = ?", (message.from_user.id,))
    user = cur.fetchone()
    conn.close()
    
    if user and user[0] == "admin":
        await show_admin_menu(message)
    else:
        await message.answer("üîí –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=ReplyKeyboardRemove())
        await state.set_state(AdminAuth.password)

@admin_router.message(AdminAuth.password)
async def check_admin_password(message: types.Message, state: FSMContext):
    if message.text == ADMIN_PASSWORD:
        add_user(message.from_user.id, message.from_user.full_name, "admin", "System")
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è! –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω.")
        await show_admin_menu(message)
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –æ—Ç–º–µ–Ω—ã")
    
    await state.clear()

async def show_admin_menu(message: types.Message):
    await message.answer(
        "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=admin_keyboard()
    )

@admin_router.message(F.text == "üÜï –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ")
async def handle_pending_products(message: types.Message):
    try:
        products = get_pending_products()
        
        if not products:
            await message.answer("‚úÖ –ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
            return
        
        for product in products:
            (product_id, name, description, supplier_price, final_price, 
             category_id, supplier_id, approved, status, in_stock, quantity, created_at) = product
            
            supplier = get_user_by_id(supplier_id)
            supplier_name = supplier[2] if supplier else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫"
            company = supplier[4] if supplier else ""
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            conn = sqlite3.connect('b2b.db')
            cur = conn.cursor()
            cur.execute("SELECT name FROM categories WHERE id = ?", (category_id,))
            category_name = cur.fetchone()
            conn.close()
            category_name = category_name[0] if category_name else "–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"
            
            text = (
                "üÜï <b>–¢–û–í–ê–† –ù–ê –ú–û–î–ï–†–ê–¶–ò–ò</b>\n\n"
                f"üÜî <b>–¢–æ–≤–∞—Ä #{product_id}</b>\n"
                f"üì¶ <b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {name}\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {description}\n"
                f"üí∞ <b>–¶–µ–Ω–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞:</b> {supplier_price} —Ä—É–±.\n"
                f"üí∞ <b>–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {final_price} —Ä—É–±.\n"
                f"üìö <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category_name}\n"
                f"üè≠ <b>–ü–æ—Å—Ç–∞–≤—â–∏–∫:</b> {supplier_name} ({company})\n"
                f"üì¶ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> {quantity} —à—Ç.\n"
                f"üü¢ <b>–í –Ω–∞–ª–∏—á–∏–∏:</b> {'–î–∞' if in_stock else '–ù–µ—Ç'}\n"
            )
            
            builder = InlineKeyboardBuilder()
            builder.add(types.InlineKeyboardButton(
                text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"admin_approve_{product_id}")
            )
            builder.add(types.InlineKeyboardButton(
                text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                callback_data=f"admin_reject_{product_id}")
            )
            
            await message.answer(
                text,
                parse_mode="HTML",
                reply_markup=builder.as_markup()
            )
        
        await message.answer("–í—Å–µ —Ç–æ–≤–∞—Ä—ã –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –ø–æ–∫–∞–∑–∞–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–ø—Ä–æ—Å–æ–≤")

@admin_router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_statistics(message: types.Message):
    try:
        conn = sqlite3.connect('b2b.db')
        cur = conn.cursor()
        
        cur.execute("SELECT COUNT(*) FROM users")
        total_users = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM users WHERE role = 'customer'")
        customers = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM users WHERE role = 'supplier'")
        suppliers = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*), SUM(total_amount) FROM orders")
        orders_count, orders_total = cur.fetchone()
        orders_total = orders_total or 0
        
        cur.execute("SELECT COUNT(*) FROM products")
        products_count = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM products WHERE approved = 0")
        pending_products = cur.fetchone()[0]
        
        cur.execute("SELECT COUNT(*) FROM orders WHERE is_recurring = 1")
        recurring_orders = cur.fetchone()[0]
        
        # –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
        cur.execute("SELECT COUNT(*) FROM products WHERE quantity <= 10 AND quantity > 0")
        low_stock = cur.fetchone()[0]
        
        # –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ
        cur.execute("SELECT COUNT(*) FROM products WHERE quantity = 0 AND in_stock = 1")
        out_of_stock = cur.fetchone()[0]
        
        conn.close()
        
        stats_text = (
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã</b>\n\n"
            f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: <b>{total_users}</b>\n"
            f"  ‚ñ™Ô∏è –ü–æ–∫—É–ø–∞—Ç–µ–ª–∏: <b>{customers}</b>\n"
            f"  ‚ñ™Ô∏è –ü–æ—Å—Ç–∞–≤—â–∏–∫–∏: <b>{suppliers}</b>\n\n"
            f"üì¶ –ó–∞–∫–∞–∑—ã: <b>{orders_count}</b>\n"
            f"  ‚ñ™Ô∏è –û–±—â–∞—è —Å—É–º–º–∞: <b>{orders_total:.2f} —Ä—É–±.</b>\n"
            f"  ‚ñ™Ô∏è –†–µ–≥—É–ª—è—Ä–Ω—ã–µ: <b>{recurring_orders}</b>\n\n"
            f"üõí –¢–æ–≤–∞—Ä—ã: <b>{products_count}</b>\n"
            f"  ‚ñ™Ô∏è –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: <b>{pending_products}</b>\n"
            f"  ‚ñ™Ô∏è –ù–∏–∑–∫–∏–π –æ—Å—Ç–∞—Ç–æ–∫ (<10): <b>{low_stock}</b>\n"
            f"  ‚ñ™Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç: <b>{out_of_stock}</b>"
        )
        
        await message.answer(
            stats_text,
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

@admin_router.message(F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def handle_users(message: types.Message):
    try:
        users = get_all_users()
        if not users:
            await message.answer("üòî –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        users_text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
        for user in users:
            tg_id, name, role, company, phone, address = user
            role_icon = "üë§" if role == "customer" else "üè≠" if role == "supplier" else "üëë"
            users_text += f"{role_icon} <b>{name}</b>\n"
            users_text += f"  ‚ñ™Ô∏è –†–æ–ª—å: {role}\n"
            users_text += f"  ‚ñ™Ô∏è –ö–æ–º–ø–∞–Ω–∏—è: {company}\n"
            users_text += f"  ‚ñ™Ô∏è –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            users_text += f"  ‚ñ™Ô∏è –ê–¥—Ä–µ—Å: {address}\n\n"
        
        await message.answer(
            users_text,
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

@admin_router.message(F.text == "üì¶ –ó–∞–∫–∞–∑—ã")
async def handle_orders(message: types.Message):
    try:
        orders = get_all_orders()
        if not orders:
            await message.answer("üì≠ –ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        builder = InlineKeyboardBuilder()
        for order in orders:
            order_id, _, _, status = order
            builder.add(types.InlineKeyboardButton(
                text=f"–ó–∞–∫–∞–∑ #{order_id} ({ORDER_STATUSES.get(status, status)})",
                callback_data=f"admin_order_{order_id}")
            )
        
        await message.answer(
            "üì¶ –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤:",
            reply_markup=builder.as_markup()
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–∫–∞–∑–æ–≤: {str(e)}")

@admin_router.callback_query(F.data.startswith("admin_order_"))
async def handle_admin_order(callback: CallbackQuery):
    try:
        order_id = int(callback.data.split("_")[2])
        order, items = get_order_details(order_id)
        
        if not order:
            await callback.message.answer("‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        _, customer_id, total, status, created_at, is_recurring, recurring_type, next_delivery, parent_order_id = order
        customer = get_user_by_id(customer_id)
        customer_name = customer[2] if customer else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        
        text = (
            f"üì¶ <b>–ó–∞–∫–∞–∑ #{order_id}</b>\n"
            f"üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {customer_name}\n"
            f"üí≥ <b>–°—É–º–º–∞:</b> {total} —Ä—É–±.\n"
            f"üìÆ <b>–°—Ç–∞—Ç—É—Å:</b> {ORDER_STATUSES.get(status, status)}\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {created_at}\n"
        )
        
        if is_recurring:
            text += (
                f"üîÑ <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–π:</b> {RECURRING_TYPES.get(recurring_type, recurring_type)}\n"
                f"üìÖ <b>–°–ª–µ–¥—É—é—â–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞:</b> {next_delivery}\n"
            )
        
        text += "\nüõí <b>–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:</b>\n"
        
        for item in items:
            name, quantity, price = item
            text += f"‚ñ™Ô∏è {name} - {quantity} —à—Ç. x {price} —Ä—É–±.\n"
        
        await callback.message.answer(
            text,
            parse_mode="HTML",
            reply_markup=order_status_keyboard(order_id)
        )
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")
    finally:
        await callback.answer()

@admin_router.callback_query(F.data.startswith("set_status_"))
async def handle_set_status(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        order_id = int(parts[2])
        status = parts[3]
        
        update_order_status(order_id, status)
        await callback.message.answer(f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {ORDER_STATUSES.get(status, status)}")
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        await notify_customer_about_status(order_id, status)
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–∫–∞–∑ –∏ —Å—Ç–∞—Ç—É—Å "–î–æ—Å—Ç–∞–≤–ª–µ–Ω", —Å–æ–∑–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑
        if status == "delivered":
            conn = sqlite3.connect('b2b.db')
            cur = conn.cursor()
            cur.execute("SELECT is_recurring FROM orders WHERE id = ?", (order_id,))
            is_recurring = cur.fetchone()[0]
            conn.close()
            
            if is_recurring:
                new_order_id = create_recurring_order(order_id)
                if new_order_id:
                    await callback.message.answer(f"üîÑ –°–æ–∑–¥–∞–Ω —Å–ª–µ–¥—É—é—â–∏–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–∫–∞–∑ #{new_order_id}")
        
    except Exception as e:
        await callback.message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}")
    finally:
        await callback.answer()

@admin_router.message(F.text == "üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def handle_categories(message: types.Message):
    try:
        categories = get_categories()
        if not categories:
            await message.answer("üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç")
            return
        
        categories_text = "üìö <b>–°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</b>\n\n"
        for category in categories:
            category_id, name = category
            categories_text += f"‚ñ™Ô∏è <b>{name}</b> (ID: {category_id})\n"
        
        await message.answer(
            categories_text,
            parse_mode="HTML"
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {str(e)}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤
@admin_router.callback_query(F.data.startswith("admin_approve_"))
async def approve_product_handler(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[2])
        approve_product(product_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        product = get_product_details(product_id)
        if product:
            supplier_id = product[6]
            product_name = product[1]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            try:
                bot = Bot(token=SUPPLIER_TOKEN)
                await bot.send_message(
                    supplier_id,
                    f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä \"{product_name}\" –±—ã–ª –æ–¥–æ–±—Ä–µ–Ω –∏ —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ."
                )
                await bot.session.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        await callback.message.delete()
        await callback.answer(f"‚úÖ –¢–æ–≤–∞—Ä #{product_id} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

@admin_router.callback_query(F.data.startswith("admin_reject_"))
async def reject_product_handler(callback: CallbackQuery):
    try:
        product_id = int(callback.data.split("_")[2])
        reject_product(product_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–µ
        product = get_product_details(product_id)
        if product:
            supplier_id = product[6]
            product_name = product[1]
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞
            try:
                bot = Bot(token=SUPPLIER_TOKEN)
                await bot.send_message(
                    supplier_id,
                    f"‚ùå –í–∞—à —Ç–æ–≤–∞—Ä \"{product_name}\" –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
                await bot.session.close()
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞: {str(e)}")
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
        await callback.message.delete()
        await callback.answer(f"‚ùå –¢–æ–≤–∞—Ä #{product_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞: {str(e)}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

# ====================== –ó–ê–ü–£–°–ö –ë–û–¢–û–í ======================
async def process_recurring_orders():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫"""
    try:
        recurring_orders = get_recurring_orders()
        today = datetime.now().strftime("%Y-%m-%d")
        
        for order in recurring_orders:
            order_id, customer_id, recurring_type, next_delivery = order
            
            if next_delivery == today:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ
                new_order_id = create_recurring_order(order_id)
                if new_order_id:
                    logger.info(f"–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–∫–∞–∑ #{new_order_id} –Ω–∞ –æ—Å–Ω–æ–≤–µ #{order_id}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
                    await notify_user(customer_id, f"üîÑ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–∫–∞–∑ #{new_order_id} –Ω–∞ {next_delivery}")
                    
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
                    admins = get_admins()
                    for admin_id in admins:
                        await notify_user(admin_id, f"üîÑ –°–æ–∑–¥–∞–Ω —Ä–µ–≥—É–ª—è—Ä–Ω—ã–π –∑–∞–∫–∞–∑ #{new_order_id} –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ {customer_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {str(e)}")

async def send_order_reminders():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–∫–∞–∑–∞—Ö"""
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∑–∞–∫–∞–∑—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞–≤—Ç—Ä–∞
        tomorrow = (datetime.now() + timedelta(days=1)).strftime("%Y-%m-%d")
        
        conn = sqlite3.connect('b2b.db')
        cur = conn.cursor()
        cur.execute("SELECT id, customer_id FROM orders WHERE next_delivery = ?", (tomorrow,))
        orders = cur.fetchall()
        conn.close()
        
        for order in orders:
            order_id, customer_id = order
            await notify_user(customer_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {str(e)}")

async def check_stock_levels():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    try:
        # –¢–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º –æ—Å—Ç–∞—Ç–∫–æ–º
        low_stock_products = check_low_stock()
        for product in low_stock_products:
            product_id, name, quantity, supplier_id = product
            await notify_supplier_low_stock(supplier_id, product_id, name, quantity)
        
        # –¢–æ–≤–∞—Ä—ã, –∑–∞–∫–æ–Ω—á–∏–≤—à–∏–µ—Å—è –Ω–∞ —Å–∫–ª–∞–¥–µ
        out_of_stock_products = check_out_of_stock()
        for product in out_of_stock_products:
            product_id, name, supplier_id = product
            await notify_supplier_out_of_stock(supplier_id, product_id, name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–ø–∞—Å–æ–≤: {str(e)}")

async def scheduler():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–¥–∞—á"""
    while True:
        now = datetime.now()
        
        # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 8:00 –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if now.hour == 8 and now.minute == 0:
            await process_recurring_orders()
        
        # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00 –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if now.hour == 19 and now.minute == 0:
            await send_order_reminders()
        
        # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 10:00 –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∞—Å–æ–≤
        if now.hour == 10 and now.minute == 0:
            await check_stock_levels()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        await asyncio.sleep(60)

async def main():
    client_bot = Bot(token=CLIENT_TOKEN)
    supplier_bot = Bot(token=SUPPLIER_TOKEN)
    admin_bot = Bot(token=ADMIN_TOKEN)
    
    client_dp = Dispatcher()
    supplier_dp = Dispatcher()
    admin_dp = Dispatcher()
    
    client_dp.include_router(client_router)
    supplier_dp.include_router(supplier_router)
    admin_dp.include_router(admin_router)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(scheduler())
    
    await asyncio.gather(
        client_dp.start_polling(client_bot),
        supplier_dp.start_polling(supplier_bot),
        admin_dp.start_polling(admin_bot)
    )

if __name__ == "__main__":
    asyncio.run(main())